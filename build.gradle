import uk.gov.hmcts.rse.AuthMode

plugins {
  id 'application'
  id 'checkstyle'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.6'
  id 'org.springframework.boot' version '2.7.18'
  id 'org.owasp.dependencycheck' version '9.2.0'
  id 'com.github.ben-manes.versions' version '0.51.0'
  id 'org.sonarqube' version '5.0.0.4638'
  id 'au.com.dius.pact' version '4.2.14'
  id "io.freefair.lombok" version "8.6"
  id 'com.github.hmcts.rse-cft-lib' version '0.19.1324'
  id "org.flywaydb.flyway" version "10.15.2"
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

def versions = [
  junit             : '5.10.3',
  junitPlatform     : '1.10.3',
  springBoot        : springBoot.class.package.implementationVersion,
  springStatemachine: '4.0.0',
  lombok            : '1.18.34',
  springSecurity    : '5.8.13',
  camunda           : '7.20.0',
  jackson           : '2.17.2',
  testcontainers    : '1.19.8'
]

allprojects {
  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(17)
    }
  }

  apply plugin: 'java'
  apply plugin: 'jacoco'
  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'com.github.ben-manes.versions'

  checkstyle {
    maxWarnings = 0
    toolVersion = '10.17.0'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
  }

  jacoco {
    toolVersion = '0.8.8' // jacocoMavenPluginVersion
    reportsDirectory = file("$buildDir/reports/jacoco")
  }

// before committing a change, make sure task still works
  dependencyUpdates {
    def isNonStable = { String version ->
      def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
      def regex = /^[0-9,.v-]+$/
      return !stableKeyword && !(version ==~ regex)
    }
    rejectVersionIf { selection -> // <---- notice how the closure argument is named
      return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
    }
  }

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
      retirejs {
        enabled = false
      }
      ossIndex {
        enabled = false
      }
    }
  }

  dependencyManagement {
    dependencies {
      //CVE-2018-10237 - Unbounded memory allocation
      dependencySet(group: 'com.google.guava', version: '33.2.1-jre') {
        entry 'guava'
      }


      dependency group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-common', version: '1.9.24'
      dependency group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: '1.9.24'
      dependency group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: '1.9.24'
      dependency group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.9.24'
      dependency group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: '1.9.24'

      dependency group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.12.0'
      dependency group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.8.13'

      dependency group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
      dependency group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
      dependency group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson

      // To prevent other libraries using conflicting versions
      dependency group: 'org.slf4j', name: 'slf4j-nop', version: '2.0.13'

      // solves CVE-2022-25857
      dependencySet(
        group: 'org.yaml',
        version: '2.2'
      ) {
        entry 'snakeyaml'
      }
      // Solves CVE-2022-31159, happens only on local builds when running dependencyCheck gradle task
      dependencySet(
        group: 'com.amazonaws',
        version: '1.12.761'
      ) {
        entry 'aws-java-sdk-core'
        entry 'aws-java-sdk-kms'
        entry 'aws-java-sdk-s3'
      }

      dependencySet(group: 'org.apache.tomcat.embed', version: '10.1.26') {
        entry 'tomcat-embed-core'
        entry 'tomcat-embed-el'
        entry 'tomcat-embed-websocket'
      }

      //Solves CVE-2023-6481
      dependencySet(group: 'ch.qos.logback', version: '1.2.13') {
        entry 'logback-core'
        entry 'logback-classic'
      }

    }
    imports {
      mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2021.0.9'
      mavenBom "com.azure.spring:spring-cloud-azure-dependencies:5.14.0"
    }
  }

  configurations {
    testCompile.exclude group: 'ch.qos.logback', module: 'logback-classic'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://jitpack.io"
    }
    maven {
      url "https://jitpack.io"
    }
    jcenter()
  }
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/integrationTest/java')
    }
    resources.srcDir file('src/integrationTest/resources')
  }

  contractTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/contractTest/java')
    }
    resources.srcDir file('src/contractTest/resources')
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
  useJUnitPlatform()
  maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

tasks.withType(Copy) {
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task integration(type: Test) {
  maxHeapSize = '3G'
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
  testLogging.showStandardStreams = false

}

task contract(type: Test) {
  group = 'Delivery pipeline'
  description = 'Runs the consumer Pact tests'
  setTestClassesDirs(sourceSets.contractTest.output.classesDirs)
  setClasspath(sourceSets.contractTest.runtimeClasspath)
  systemProperty 'pact.rootDir', "pacts"
}

task fortifyScan(type: JavaExec, description: 'Run fortify scan.') {
  getMainClass().set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

task awaitApplicationReadiness(type: Exec, description: 'Awaits until application is ready.') {
  commandLine './bin/wait-for.sh'
  commandLine './bin/wait-for.sh', 'manage-case'
}

task runSmokeTests(type: Exec, description: 'Runs smoke tests.') {
  commandLine '/usr/bin/yarn', '--silent', 'run', 'test:smoke'
}

task runProdApiTests(type: Exec, description: 'Runs Prod features in functional tests.') {
  onlyIf {
    return System.env.ENVIRONMENT == 'aat'
  }
  commandLine '/usr/bin/yarn', '--silent', 'run', 'test:api-prod'
}

task runNonProdApiTestsByGroups(description: 'Runs Non Prod features in functional tests.') {
  onlyIf {
    return System.env.ENVIRONMENT == 'preview'
  }

  doLast {
    def ftGroups = System.env.PR_FT_GROUPS ?: 'nonprod'
    for (ftGroup in ftGroups.toLowerCase().split(",")) {
      exec {
        logger.info('Running FT group: ' + ftGroup)
        commandLine '/usr/bin/yarn', 'run', 'test:api-' + ftGroup
      }
    }
  }
}

task runNightlyApiTests(type: Exec, description: 'Runs additional multiparty nightly tests.') {
  onlyIf {
    return System.env.NIGHTLY_RUN == 'true'
  }
  commandLine '/usr/bin/yarn', '--silent', 'run', 'test:api-nightly-prod'
}

def inStrictOrder(Task... tasks) {
  for (int i = 0; i < tasks.size() - 1; i++) {
    tasks[i + 1].mustRunAfter(tasks[i])
  }
  return tasks
}

task smoke(description: 'Runs the smoke tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness, runSmokeTests))
}

task functional(description: 'Runs the functional tests.') {
  dependsOn(inStrictOrder(awaitApplicationReadiness,
    runProdApiTests, runNonProdApiTestsByGroups, runNightlyApiTests))
}

project.tasks['sonarqube'].dependsOn test, jacocoTestReport

// excluding controllers from Sonar due to https://tools.hmcts.net/jira/browse/DTSCCI-254
// https://tools.hmcts.net/jira/browse/DTSCCI-311 ticket to write unit test for each controller

sonarqube {
  properties {
    property "sonar.projectName", "CIVIL :: service"
    property "sonar.projectKey", "civil-service"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
    property "sonar.coverage.exclusions", "**/model/**, **/config/**/*Configuration.java, **/request/servlet/** , **/controllers/**, **/testingsupport/**, **/*ExternalTaskListener.java, **/*BaseExternalTaskHandler.java, **/stereotypes/**, **/*Exception.java, **/EventHistoryMapper*.java, **/model/hearingvalues/**, **/enums/hearing/**, **/fees/client/**, **/enums/sdo/**, **/service/PaymentsService.java, **/DashboardWithParamsCallbackHandler.java, **/advice/**"
    property "sonar.cpd.exclusions", "**/*DocumentManagementService.java, **/*Spec*.java, **/*CcdDashboardClaimantClaimMatcher.java, **/*CcdDashboardDefendantClaimMatcher.java"
    property "sonar.exclusions", "**/hmc/model/**, **/model/hearingvalues/**"
    property "sonar.host.url", "https://sonar.reform.hmcts.net/"
    property "sonar.web.javaOpts", "-Xmx2G"
  }
}

jacocoTestReport {
  executionData(test, integration)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
  subprojects.each {
    sourceSets it.sourceSets.main
  }
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

jacocoTestReport.dependsOn {
  subprojects*.test
}

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
    "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
    "org.junit.platform:junit-platform-commons:${versions.junitPlatform}",
    "org.junit.platform:junit-platform-engine:${versions.junitPlatform}"
  ]
]

configurations.all {
  resolutionStrategy.eachDependency { details ->
    if (details.requested.group == 'org.projectlombok') {
      details.useVersion versions.lombok
    }
  }
  exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  exclude group: 'org.projectlombok', module: 'lombok-mapstruct-binding'
}

dependencies {
  implementation 'com.github.hmcts:civil-commons:1.1.1'
  implementation project(':dashboard-notifications')
  implementation group: 'org.springframework.data', name: 'spring-data-jpa'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework', name: 'spring-aspects'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'

  implementation group: 'org.springframework.statemachine', name: 'spring-statemachine-core', version: versions.springStatemachine
  implementation group: 'org.springframework.statemachine', name: 'spring-statemachine-test', version: versions.springStatemachine


  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.8.0'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.3'
  implementation group: 'javax.persistence', name: 'javax.persistence-api'

  implementation group: 'org.jdbi', name: 'jdbi3-sqlobject', version: '3.45.2'
  implementation group: 'org.jdbi', name: 'jdbi3-spring4', version: '3.19.0'

  implementation group: 'org.flywaydb', name: 'flyway-core'

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-openfeign-core'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '4.0.3'

  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '13.2.1'
  implementation group: 'org.springframework.retry', name: 'spring-retry'

  implementation group: 'com.github.hmcts', name: 'java-logging', version: '6.1.5'

  implementation group: 'com.github.hmcts', name: 'ccd-client', version: '4.9.2'
  implementation group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '7.0.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'send-letter-client', version: '3.0.3'
  implementation('com.github.hmcts:fees-java-client:0.0.6') {
    exclude group: 'java-logging', module: ' java-logging'
  }

  implementation('com.github.hmcts:payments-java-client:1.6.7') {
    exclude group: 'java-logging', module: ' java-logging'
  }
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '4.0.0'
  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '5.1.0-RELEASE'
  implementation group: 'com.github.hmcts', name: 'ccd-case-document-am-client', version: '1.7.1'
  implementation group: 'com.sendgrid', name: 'sendgrid-java', version: '4.10.2'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.1.8'

  implementation group: 'org.springframework.security', name: 'spring-security-web', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-config', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-core', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose', version: versions.springSecurity
  implementation group: 'org.springframework.security', name: 'spring-security-oauth2-core', version: versions.springSecurity
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.40'
  implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.12.6'
  implementation group: 'uk.gov.hmcts.reform', name: 'idam-client', version: '2.0.0'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.23.1'
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.23.1'
  implementation group: 'org.apache.commons', name: 'commons-text', version: '1.12.0'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.91'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '10.1.23'
  implementation group: 'org.elasticsearch', name: 'elasticsearch', version: '7.17.22'
  implementation group: 'com.networknt', name: 'json-schema-validator', version: '1.5.0'

  implementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: versions.jackson
  implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jackson

  implementation group: 'org.camunda.bpm', name: 'camunda-external-task-client', version: versions.camunda
  implementation group: 'org.camunda.community.rest', name: 'camunda-platform-7-rest-client-spring-boot-starter', version: versions.camunda
  implementation group: 'org.camunda.bpm', name: 'camunda-engine-rest-core', version: versions.camunda

  implementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'

  // JAX-B dependencies for JDK 9+
  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
  implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.2'
  implementation group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.5'

  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.3.0'

  implementation group: 'com.azure', name: 'azure-core', version: '1.50.0'
  implementation group: 'com.azure', name: 'azure-messaging-servicebus', version: '7.17.1'
  implementation group: 'com.microsoft.azure', name: 'azure-servicebus', version: '3.6.7'

  testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.11.0'
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '4.11.0'
  testImplementation group: 'org.mockito', name: 'mockito-inline', version: '4.11.0'
  testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.14.18'
  testImplementation group: 'net.bytebuddy', name: 'byte-buddy-agent', version: '1.14.18'

  testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok
  testCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok

  testImplementation libraries.junit5
  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'

  testImplementation group: 'io.rest-assured', name: 'rest-assured'
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.26.3'

  testImplementation group: 'org.springframework.statemachine', name: 'spring-statemachine-test', version: versions.springStatemachine
  testImplementation 'com.github.hmcts:fortify-client:1.4.3:all'
  //pact contract testing
  contractTestImplementation 'au.com.dius.pact.consumer:junit5:4.6.5'
  contractTestImplementation group: 'org.hamcrest', name: 'java-hamcrest', version: '2.0.0.0'
  contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.10.3')
  contractTestImplementation('org.junit.jupiter:junit-jupiter-engine:5.10.3')
  contractTestImplementation sourceSets.main.runtimeClasspath
  contractTestImplementation sourceSets.test.runtimeClasspath

  integrationTestImplementation('org.junit.jupiter:junit-jupiter-api:5.10.3')
  integrationTestImplementation('org.junit.jupiter:junit-jupiter-engine:5.10.3')

  // dashboard specific changes

  testImplementation group: 'org.testcontainers', name: 'postgresql', version: versions.testcontainers
  testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: versions.testcontainers
  testImplementation group: 'com.h2database', name: 'h2', version: '2.3.230'
  // dashboard specific changes ends


  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath

  // https://mvnrepository.com/artifact/com.opencsv/opencsv
  implementation group: 'com.opencsv', name: 'opencsv', version: '5.9', {
    exclude group: 'commons-collections', module: 'commons-collections'
  }
}

mainClassName = 'uk.gov.hmcts.reform.civil.Application'

bootJar {
  getArchiveFileName().set(provider {
    'civil-service.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

task buildCCDXlsx(type: Exec) {
  group 'ccd tasks'

  environment 'CCD_DEF_CASE_SERVICE_BASE_URL', 'http://localhost:4000'
  environment 'CCD_DEF_GEN_APP_SERVICE_BASE_URL', 'http://localhost:9999'
  environment 'CCD_DEF_AAC_URL', 'http://localhost:4502'
  commandLine './bin/build-civil-xlsx-definitions.sh'
}

task runOtherServices(type: Exec) {
  group 'ccd tasks'

  environment 'ADDITIONAL_COMPOSE_FILES', 'cftlib-additional-services.yml'
  environment 'BASE_COMPOSE_FILES_PATH', './src/cftlib/resources/docker/'

  commandLine './bin/add-services.sh'
  doLast() {
    importBpmnDiagrams
  }
}

task importBpmnDiagrams(type: Exec) {
  group 'ccd tasks'

  dependsOn(runOtherServices)

  environment 'CAMUNDA_BASE_URL', 'http://localhost:9404'
  environment 'SERVICE_AUTH_PROVIDER_API_BASE_URL', 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'

  commandLine './bin/import-bpmn-diagram-cftlib.sh'
}

bootWithCCD {
  group 'ccd tasks'

  dependsOn(buildCCDXlsx)
  dependsOn(runOtherServices)
  dependsOn(importBpmnDiagrams)

  //AAT or Local (IDAM and S2S Simulators)
  authMode = AuthMode.AAT

  environment 'BASE_COMPOSE_FILES_PATH', './src/cftlib/resources/docker/'
  environment 'RSE_LIB_ADDITIONAL_DATABASES', 'cmc'

  doFirst() {
    project.file('./.aat-env').readLines().each() {
      def index = it.indexOf("=")
      def key = it.substring(0, index)
      def value = it.substring(index + 1)
      environment(key, value)
    }
  }

}

task runAndPublishConsumerPactTests(type: Test) {
  dependsOn(contract)
  logger.lifecycle("Runs pact Tests")
  testClassesDirs = sourceSets.contractTest.output.classesDirs
  classpath = sourceSets.contractTest.runtimeClasspath
  finalizedBy(pactPublish)
}

project.ext {
  pactVersion = getCheckedOutGitCommitHash()
}

pact {
  publish {
    pactDirectory = 'pacts'
    pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    version = project.pactVersion
  }
}

def getCheckedOutGitCommitHash() {
  'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task loadEnvSecrets() {
  doLast {
    new ByteArrayOutputStream().withStream { os ->
      exec {
        commandLine 'az', 'keyvault', 'secret', 'show', '--vault-name', 'civil-aat', '-o', 'tsv', '--query', 'value', '--name', 'civil-service-dot-env'
        standardOutput = os
      }
      project.file('./.aat-env').write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
    }
  }
}

bootRun {
  doFirst() {
    if (project.file('./.aat-env').exists()) {
      project.file('./.aat-env').readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        environment key, value
      }
    }
  }
}
