const {I} = inject();

module.exports = {

  fields: {
    selectFacilities: '//input[@value="Laptop"]',
    selectHearingStage: '#AAA7-DIS',
    selectAttendanceType: '//input[@value="In Person"]',
    partyChannel: '#partyChannel',
    noOfAttendees: '#attendance-number',
    hearingLocationEle: '//li[contains(@class, "location-selection")]',
    noSpecificJudge: '#noSpecificJudge',
    districtJudgeTypeEle: '//input[@value="45"]',
    deputyDistrictJudgeTypeEle: '//input[@value="24"]',
    hearingDuration: '#durationhours',
    noSpecificDate: '#noSpecificDate',
    additionalInstructions: '#additionalInstructionsTextarea',
    viewEle: 'a[id^="link-view-details"]',
    cancelEle: 'a[id^="link-cancel"]',
    waitingToBeListedText: 'WAITING TO BE LISTED',
  },

  async openHearingTab() {
    let urlBefore = await I.grabCurrentUrl();
    await I.refreshPage();
    await I.waitForVisible(locate('div.mat-tab-label-content').withText('Hearings'), 60);

    await I.retryUntilUrlChanges(async () => {
      await I.forceClick(locate('div.mat-tab-label-content').withText('Hearings'));

    }, urlBefore);
    await I.waitForText('Current and upcoming');
    await I.clickHearingHyperLinkOrButton(locate('div > exui-case-hearings > div > a').withText('Request a hearing'));
    await I.waitForText('Hearing requirements');
    await I.runAccessibilityTest();
    await I.clickContinue();
  },

  async selectAdditionalFacilities() {
    await I.waitForText('Do you require any additional facilities?');
    await I.click(this.fields.selectFacilities);
    await I.runAccessibilityTest();
    await I.clickContinue();
  },

  async selectHearingStage() {
    await I.waitForText('What stage is this hearing at?');
    await I.click(this.fields.selectHearingStage);
    await I.runAccessibilityTest();
    await I.clickContinue();
  },

  async selectParticipantAttendance() {
    await I.waitForText('Participant attendance');
    await I.waitForElement(this.fields.selectAttendanceType);
    await I.click(this.fields.selectAttendanceType);
    let noOfIndividuals = await I.grabNumberOfVisibleElements('.party-row');

    for (let i=0; i<noOfIndividuals; i++) {
      await I.selectOption(`${this.fields.partyChannel}`+i, 'In Person');
    }

    await I.clearField(this.fields.noOfAttendees);
    await I.fillField(this.fields.noOfAttendees, '8');
    await I.runAccessibilityTest();
    await I.clickContinue();
  },

  async selectHearingVenues() {
    await I.waitForText('What are the hearing venue details?');
    await I.waitForElement(this.fields.hearingLocationEle);
    await I.clickContinue();
  },

  async selectJudges() {
    await I.waitForText('Do you want a specific judge?');
    await I.click(this.fields.noSpecificJudge);
    await I.waitForText('Select all judge types that apply');
    await I.click(this.fields.districtJudgeTypeEle);
    await I.click(this.fields.deputyDistrictJudgeTypeEle);
    await I.runAccessibilityTest();
    await I.clickContinue();
  },

  async selectLengthDatePriority() {
    await I.waitForText('Length of hearing');
    await I.fillField(this.fields.hearingDuration, '2');
    await I.runAccessibilityTest();
    await I.clickContinue();
  },

  async enterAdditionalInstructions() {
    await I.waitForText('Enter any additional instructions for the hearing');
    await I.fillField(this.fields.additionalInstructions, 'Text generated by automation test');
    await I.runAccessibilityTest();
    await I.clickContinue();
  },

  async submitHearing() {
    await I.waitForText('Check your answers before sending your request');
    await I.clickHearingHyperLinkOrButton('Submit request');
    await I.waitForText('Hearing request submitted');
    await I.runAccessibilityTest();
    await I.clickHearingHyperLinkOrButton(locate('#content a').withText('view the status of this hearing in the hearings tab'));
    await I.waitForText(this.fields.waitingToBeListedText);
    await I.seeElement(this.fields.viewEle);
    await I.seeElement(this.fields.cancelEle);
  },

  async verifyWaitingForHearingToBeListed() {
    await I.waitForText(this.fields.waitingToBeListedText);
    await I.seeElement(this.fields.viewEle);
    await I.seeElement(this.fields.cancelEle);
  }
};
