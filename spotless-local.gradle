// spotless-local.gradle  â€” run with:
//   ./gradlew -I spotless-local.gradle lintFix
//   ./gradlew -I spotless-local.gradle lintCheck
// RATCHET_BRANCH=origin/master ./gradlew -I spotless-local.gradle lintFix

initscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.22.0"
    }
}

// Prefer origin/main; else origin/master; or override with RATCHET_BRANCH
def findRatchetBranch = {
    def env = System.getenv("RATCHET_BRANCH")
    if (env) return env
    def hasRef = { ref ->
        def p = ["bash","-lc","git show-ref --verify --quiet refs/remotes/${ref}"].execute()
        p.waitFor(); p.exitValue() == 0
    }
    hasRef("origin/main") ? "origin/main" : (hasRef("origin/master") ? "origin/master" : "")
}

allprojects { Project p ->
    // Apply Spotless by class to avoid ID lookup
    p.apply plugin: com.diffplug.gradle.spotless.SpotlessPlugin

    // Configure Spotless
    p.spotless {
        def base = findRatchetBranch()
        if (base) { ratchetFrom(base) }  // only changed files vs base

        java {
            target "src/**/*.java"
            // 4-space compatible with your Checkstyle Indentation rule
            palantirJavaFormat("2.38.0")
            importOrder("", "java", "javax", "org", "com")
            removeUnusedImports()
            formatAnnotations()
            trimTrailingWhitespace()
            endWithNewline()
        }
    }

    // Local apply-fixes task
    p.tasks.register("lintFix") {
        group = "verification"
        description = "Auto-format sources via Spotless (local only)."
        dependsOn "spotlessApply"
    }

    // Local verify task (includes Checkstyle if present)
    p.tasks.register("lintCheck") {
        group = "verification"
        description = "Run Spotless check (+ Checkstyle if available)."
        dependsOn "spotlessCheck"
        doFirst {
            if (p.plugins.hasPlugin("checkstyle")) {
                dependsOn("checkstyleMain", "checkstyleTest")
            }
        }
    }
}
