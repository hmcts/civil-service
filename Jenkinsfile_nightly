#!groovy

properties([
  pipelineTriggers([cron('H 8 * * 1-5')]),
  copyArtifactPermission('/HMCTS_a_to_c_Nightly/civil-service/*'),
  parameters([
    string(name: 'FORCE_GREEN_BUILD', defaultValue: 'false', description: 'Should force pipeline to go green by not running any functional tests'),
    string(name: 'RUN_FAILED_AND_NOT_EXECUTED_TEST_FILES', defaultValue: 'false', description: 'Runs the failed test files and not executed test files from the first previous pipeline run that contains the following files \'failedTestFiles.json\' and \'notExecutedTestFiles.json\''),
    string(name: 'ENVIRONMENT', defaultValue: 'aat', description: 'Environment to test'),
    string(name: 'FRONTEND_URL', defaultValue: 'https://manage-case.aat.platform.hmcts.net',
      description: 'The URL you want to run the full functional tests against'),
    string(name: 'IDAM_API_URL', defaultValue: 'https://idam-api.aat.platform.hmcts.net',
      description: 'The URL of idam api'),
    string(name: 'DM_STORE_URL', defaultValue: 'http://dm-store-aat.service.core-compute-aat.internal',
      description: 'The URL of dm store'),
    string(name: 'SERVICE_AUTH_PROVIDER_API_BASE_URL', defaultValue: 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal',
      description: 'The URL of service auth provider'),
    string(name: 'CCD_DATA_STORE_URL', defaultValue: 'http://ccd-data-store-api-aat.service.core-compute-aat.internal',
      description: 'The URL of ccd data store'),
    string(name: 'AAC_API_URL', defaultValue: 'http://aac-manage-case-assignment-aat.service.core-compute-aat.internal',
      description: 'The URL of AAC service'),
    string(name: 'CIVIL_SERVICE_URL', defaultValue: 'http://civil-service-aat.service.core-compute-aat.internal',
      description: 'The URL of civil service'),
    string(name: 'WAIT_FOR_TIMEOUT_MS',
      defaultValue: '120000',
      description: 'Functional tests waitForTimeout value'),
    string(name: 'SECURITY_RULES',
      defaultValue: 'https://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The security rules to use')
  ])
])

@Library("Infrastructure")

def type = "java"
def product = "civil"
def component = "service"
def yarnBuilder = new uk.gov.hmcts.contino.YarnBuilder(this)
def ccdBranch = "master"

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def copyFailedAndNotExecutedTestFilesJson() {
  def buildFound = false
  def buildNumber = currentBuild.previousBuild.number
  def minBuildNumber = ((buildNumber - 8) > 0) ? buildNumber - 8 : 0
  while (!buildFound && buildNumber > minBuildNumber) {
    try {
      copyArtifacts projectName: env.JOB_NAME, selector: specific("${buildNumber}"), filter: "test-results/functional/failedTestFiles.json"
      copyArtifacts projectName: env.JOB_NAME, selector: specific("${buildNumber}"), filter: "test-results/functional/notExecutedTestFiles.json"
      buildFound = true
    } catch (Exception error) {
      echo "artifact not found: " + error.toString()
      buildNumber--
    }
  }
}

def secrets = [
  'civil-${env}': [
    secret('microservicekey-civil-service', 'S2S_SECRET'),
    secret('default-password', 'DEFAULT_PASSWORD'),
    secret('judge-default-password', 'JUDGE_DEFAULT_PASSWORD'),
    secret('iac-default-password', 'IAC_DEFAULT_PASSWORD'),
    secret('generic-docker-pact-broker-password', 'GENERIC_DOCKER_PACT_BROKER_YAML_PASS')
  ]
]

withNightlyPipeline(type, product, component) {
  env.FORCE_GREEN_BUILD=params.FORCE_GREEN_BUILD
  env.RUN_FAILED_AND_NOT_EXECUTED_TEST_FILES=params.RUN_FAILED_AND_NOT_EXECUTED_TEST_FILES
  env.URL = params.FRONTEND_URL
  env.DM_STORE_URL=params.DM_STORE_URL
  env.IDAM_API_URL=params.IDAM_API_URL
  env.SERVICE_AUTH_PROVIDER_API_BASE_URL = params.SERVICE_AUTH_PROVIDER_API_BASE_URL
  env.CCD_DATA_STORE_URL = params.CCD_DATA_STORE_URL
  env.CIVIL_SERVICE_URL = params.CIVIL_SERVICE_URL
  env.WAIT_FOR_TIMEOUT_MS = params.WAIT_FOR_TIMEOUT_MS
  env.URL_FOR_SECURITY_SCAN = params.CIVIL_SERVICE_URL
  env.TESTS_FOR_ACCESSIBILITY = true
  env.NIGHTLY_RUN = true
  env.AAC_API_URL = params.AAC_API_URL
  overrideVaultEnvironments([
  'aat': params.ENVIRONMENT
  ])
  loadVaultSecrets(secrets)

  boolean forceGreenBuild = env.FORCE_GREEN_BUILD.toBoolean();
  boolean runFailedAndNotExecutedTestFiles = env.RUN_FAILED_AND_NOT_EXECUTED_TEST_FILES.toBoolean();

  //enableMutationTest()
  enableFortifyScan()
  //enableSecurityScan()

  enableFullFunctionalTest(200)

  if(!forceGreenBuild) {
    before('fullFunctionalTest') {
      if(runFailedAndNotExecutedTestFiles) {
        copyFailedAndNotExecutedTestFilesJson()
      }
      sh """
        ./bin/pull-latest-ccd-files.sh ${ccdBranch}
      """
      yarnBuilder.yarn('yarn-update')
      yarnBuilder.yarn('install-dependencies')
      yarnBuilder.yarn('playwright install')
    }

    afterAlways('fullFunctionalTest') {
      archiveArtifacts allowEmptyArchive: true, artifacts: 'test-results/functional/**/*'
      env.TESTS_FOR_ACCESSIBILITY = false
    }

    afterAlways('fortify-scan') {
      steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
    }
  }
}

